defmodule Wayfarer.Dsl.HostPattern do
  @moduledoc """
  A struct for storing a host pattern generated by the DSL.
  """

  alias Spark.Dsl.Entity

  defstruct pattern: nil

  @type t :: %__MODULE__{pattern: String.t()}

  # This is not a rigorous check, it's just enough to do for now.
  @pattern_regex ~r/^(\*\.)?([a-zA-Z0-9-]+\.)*([a-zA-Z0-9-]+)\.?$/

  @doc false
  @spec entities :: [Entity.t()]
  def entities do
    [
      %Entity{
        name: :pattern,
        target: __MODULE__,
        schema: [
          pattern: [
            type: :string,
            required: true,
            doc: "A hostname matching pattern."
          ]
        ],
        args: [:pattern],
        transform: {__MODULE__, :transform, []}
      }
    ]
  end

  @doc false
  @spec transform(t) :: {:ok, t} | {:error, any}
  def transform(pattern) do
    if Regex.match?(@pattern_regex, pattern.pattern) do
      {:ok, pattern}
    else
      {:error, "Invalid host pattern: `#{pattern}`"}
    end
  end
end
